# This is a basic workflow to help you get started with Actions

name: fiserv index workflow

# Controls when the workflow will run
# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master", "dev", "stage", "prod" ]
  # pull_request:
  #  branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel

jobs:
  # Potential workflow: https://stackoverflow.com/questions/74854189/call-external-rest-api-when-a-file-is-added-or-updated-to-a-github-repository
  # trigger on files push (including paths and branches filter)
  # prepare data about added and modified files using the file-changes-action
  # run a matrix based on the previous job output and call an external API endpoint using the http-request-action and passing values from the matrix.
  # https://github.com/marketplace/actions/file-changes-action
  # https://github.com/trilom/file-changes-action

  prepare-files:
    runs-on: ubuntu-latest
    outputs:
      matrix-added: ${{ steps.file-changes.outputs.files_added }}
      matrix-modified: ${{ steps.file-changes.outputs.files_modified }}
    steps:
      - id: file-changes
        uses: trilom/file-changes-action@v1.2.4

  post-files-added:
    needs: prepare-files
    runs-on: ubuntu-latest
    strategy:
      matrix:
        file: ${{ fromJSON(needs.prepare-files.outputs.matrix-added) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Echo file
        run: |
          echo ${{ matrix.file }} # to test if the correct file was passed

      - name: Make an API call
        uses: fjogeleit/http-request-action@v1
        with:
          url: 'https://postman-echo.com/post'
          method: 'POST'
          file: "${{ github.workspace }}/${{ matrix.file }}"

  # post-files-added:
  #   # define where you want test to run
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       # define the wd you want to use
  #       working-directory: ./fiserv/
    
  #   # specify versions of test environment
  #   strategy:
  #     matrix:
  #       python-version: [3.11]
    
  #   # to use environment variables
  #   env:
  #     MODE: ${{  secrets.MODE_SECRET }}
  #     VAR: ${{ secrets.MODE_VARIABLE }}
  #     # 
  #     # MODE: "dev"

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     # premade script that sets up running environment
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     # set up Python environment, using version defined above under strategy
  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}
      
  #     # install Python dependencies
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r ../fiserv/requirements.txt
      
  #     # # trigger Python tests
  #     # - name: Test app code
  #     #   run: python ./main_test.py

  #     # Runs a single command using the runners shell
  #     - name: Run a one-line script
  #       run: echo Hello, world!

  #     # Runs a set of commands using the runners shell
  #     - name: Run a multi-line script
  #       run: |
  #         echo HERE ARE VARIABLES:
  #         echo $VAR
  #         echo $MODE

  # test:
  #   # create container environment

  #   # define where you want test to run
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       # define the wd you want to use
  #       working-directory: ./fiserv/
    
  #   # specify versions of test environment
  #   strategy:
  #     matrix:
  #       python-version: [3.11]
    
  #   # to use environment variables
  #   env:
  #     MODE: ${{  secrets.MODE_SECRET }}
  #     VAR: ${{ secrets.MODE_VARIABLE }}
  #     # 
  #     # MODE: "dev"

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     # premade script that sets up running environment
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     # set up Python environment, using version defined above under strategy
  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}
      
  #     # install Python dependencies
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r ../fiserv/requirements.txt
      
  #     # # trigger Python tests
  #     # - name: Test app code
  #     #   run: python ./main_test.py

  #     # Runs a single command using the runners shell
  #     - name: Run a one-line script
  #       run: echo Hello, world!

  #     # Runs a set of commands using the runners shell
  #     - name: Run a multi-line script
  #       run: |
  #         echo HERE ARE VARIABLES:
  #         echo $VAR
  #         echo $MODE


  # # This workflow contains a single job called "build"
  # build:
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest
    
  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v3

  #     # Runs a single command using the runners shell
  #     - name: Run a one-line script
  #       run: echo Hello, world!

  #     # Runs a set of commands using the runners shell
  #     - name: Run a multi-line script
  #       run: |
  #         echo Add other actions to build,
  #         echo test, and deploy your project.
